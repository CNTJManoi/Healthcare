// <auto-generated />
using System;
using Healthcare.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Healthcare.Database.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221014061710_MigrationName")]
    partial class MigrationName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Healthcare.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("Healthcare.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BeginWorkTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Diplom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EndWorkTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Society")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SpecializationDoctor")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Healthcare.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Society")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Healthcare.Reception.Models.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttachedCabinetId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttachedDepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RecordingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RegisteredPatientId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResponsibleDoctorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AttachedCabinetId");

                    b.HasIndex("AttachedDepartmentId");

                    b.HasIndex("RegisteredPatientId");

                    b.HasIndex("ResponsibleDoctorId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Healthcare.Separations.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<int>("TypeDepartment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Healthcare.Separations.Models.Cabinet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("TypeDoctor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Cabinet");
                });

            modelBuilder.Entity("Healthcare.Models.Doctor", b =>
                {
                    b.HasOne("Healthcare.Separations.Department", null)
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Healthcare.Models.Patient", b =>
                {
                    b.HasOne("Healthcare.Separations.Department", null)
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Healthcare.Reception.Models.Record", b =>
                {
                    b.HasOne("Healthcare.Separations.Models.Cabinet", "AttachedCabinet")
                        .WithMany()
                        .HasForeignKey("AttachedCabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healthcare.Separations.Department", "AttachedDepartment")
                        .WithMany()
                        .HasForeignKey("AttachedDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healthcare.Models.Patient", "RegisteredPatient")
                        .WithMany()
                        .HasForeignKey("RegisteredPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healthcare.Models.Doctor", "ResponsibleDoctor")
                        .WithMany()
                        .HasForeignKey("ResponsibleDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachedCabinet");

                    b.Navigation("AttachedDepartment");

                    b.Navigation("RegisteredPatient");

                    b.Navigation("ResponsibleDoctor");
                });

            modelBuilder.Entity("Healthcare.Separations.Models.Cabinet", b =>
                {
                    b.HasOne("Healthcare.Separations.Department", null)
                        .WithMany("Cabinets")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Healthcare.Separations.Department", b =>
                {
                    b.Navigation("Cabinets");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
